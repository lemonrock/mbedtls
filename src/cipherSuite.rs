// This file is part of mbedtls. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/mbedtls/master/COPYRIGHT. No part of mbedtls, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
// Copyright Â© 2016 The developers of mbedtls. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/mbedtls/master/COPYRIGHT.


use std::slice::from_raw_parts;
use std::mem::transmute;
use std::ffi::CStr;
extern crate libc;
use self::libc::c_int;
extern crate mbedtls_sys;


#[allow(non_camel_case_types)]
#[derive(Clone, Copy, Debug)]
#[repr(i32)]
pub enum CipherSuite
{
	TLS_RSA_WITH_NULL_MD5 = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_NULL_MD5,
	TLS_RSA_WITH_NULL_SHA = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_NULL_SHA,
	TLS_RSA_WITH_RC4_128_MD5 = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_RC4_128_MD5,
	TLS_RSA_WITH_RC4_128_SHA = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_RC4_128_SHA,
	TLS_RSA_WITH_DES_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA,
	TLS_RSA_WITH_3DES_EDE_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA,
	TLS_DHE_RSA_WITH_DES_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA,
	TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA,
	TLS_PSK_WITH_NULL_SHA = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_NULL_SHA,
	TLS_DHE_PSK_WITH_NULL_SHA = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA,
	TLS_RSA_PSK_WITH_NULL_SHA = mbedtls_sys::MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA,
	TLS_RSA_WITH_AES_128_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA,
	TLS_DHE_RSA_WITH_AES_128_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA,
	TLS_RSA_WITH_AES_256_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA,
	TLS_DHE_RSA_WITH_AES_256_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA,
	TLS_RSA_WITH_NULL_SHA256 = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_NULL_SHA256,
	TLS_RSA_WITH_AES_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256,
	TLS_RSA_WITH_AES_256_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256,
	TLS_RSA_WITH_CAMELLIA_128_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA,
	TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,
	TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,
	TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,
	TLS_RSA_WITH_CAMELLIA_256_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,
	TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,
	TLS_PSK_WITH_RC4_128_SHA = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_RC4_128_SHA,
	TLS_PSK_WITH_3DES_EDE_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA,
	TLS_PSK_WITH_AES_128_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA,
	TLS_PSK_WITH_AES_256_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA,
	TLS_DHE_PSK_WITH_RC4_128_SHA = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA,
	TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA,
	TLS_DHE_PSK_WITH_AES_128_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA,
	TLS_DHE_PSK_WITH_AES_256_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA,
	TLS_RSA_PSK_WITH_RC4_128_SHA = mbedtls_sys::MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA,
	TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA,
	TLS_RSA_PSK_WITH_AES_128_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA,
	TLS_RSA_PSK_WITH_AES_256_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA,
	TLS_RSA_WITH_AES_128_GCM_SHA256 = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256,
	TLS_RSA_WITH_AES_256_GCM_SHA384 = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384,
	TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = mbedtls_sys::MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,
	TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = mbedtls_sys::MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,
	TLS_PSK_WITH_AES_128_GCM_SHA256 = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256,
	TLS_PSK_WITH_AES_256_GCM_SHA384 = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384,
	TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256,
	TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384,
	TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 = mbedtls_sys::MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256,
	TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 = mbedtls_sys::MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384,
	TLS_PSK_WITH_AES_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256,
	TLS_PSK_WITH_AES_256_CBC_SHA384 = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384,
	TLS_PSK_WITH_NULL_SHA256 = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_NULL_SHA256,
	TLS_PSK_WITH_NULL_SHA384 = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_NULL_SHA384,
	TLS_DHE_PSK_WITH_AES_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256,
	TLS_DHE_PSK_WITH_AES_256_CBC_SHA384 = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384,
	TLS_DHE_PSK_WITH_NULL_SHA256 = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256,
	TLS_DHE_PSK_WITH_NULL_SHA384 = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384,
	TLS_RSA_PSK_WITH_AES_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256,
	TLS_RSA_PSK_WITH_AES_256_CBC_SHA384 = mbedtls_sys::MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384,
	TLS_RSA_PSK_WITH_NULL_SHA256 = mbedtls_sys::MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256,
	TLS_RSA_PSK_WITH_NULL_SHA384 = mbedtls_sys::MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384,
	TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256,
	TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,
	TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256,
	TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256,
	TLS_ECDH_ECDSA_WITH_NULL_SHA = mbedtls_sys::MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA,
	TLS_ECDH_ECDSA_WITH_RC4_128_SHA = mbedtls_sys::MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA,
	TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA,
	TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
	TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA,
	TLS_ECDHE_ECDSA_WITH_NULL_SHA = mbedtls_sys::MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA,
	TLS_ECDHE_ECDSA_WITH_RC4_128_SHA = mbedtls_sys::MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,
	TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,
	TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
	TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
	TLS_ECDH_RSA_WITH_NULL_SHA = mbedtls_sys::MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA,
	TLS_ECDH_RSA_WITH_RC4_128_SHA = mbedtls_sys::MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA,
	TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,
	TLS_ECDH_RSA_WITH_AES_128_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,
	TLS_ECDH_RSA_WITH_AES_256_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA,
	TLS_ECDHE_RSA_WITH_NULL_SHA = mbedtls_sys::MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA,
	TLS_ECDHE_RSA_WITH_RC4_128_SHA = mbedtls_sys::MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA,
	TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,
	TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
	TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
	TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
	TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,
	TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256,
	TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,
	TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
	TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,
	TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,
	TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384,
	TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
	TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
	TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,
	TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,
	TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
	TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
	TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,
	TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384,
	TLS_ECDHE_PSK_WITH_RC4_128_SHA = mbedtls_sys::MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA,
	TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA,
	TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA,
	TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA = mbedtls_sys::MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA,
	TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256,
	TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384,
	TLS_ECDHE_PSK_WITH_NULL_SHA = mbedtls_sys::MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA,
	TLS_ECDHE_PSK_WITH_NULL_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256,
	TLS_ECDHE_PSK_WITH_NULL_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384,
	TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256,
	TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384,
	TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256,
	TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384,
	TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,
	TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384,
	TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256,
	TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384,
	TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256 = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256,
	TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384 = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384,
	TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 = mbedtls_sys::MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256,
	TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 = mbedtls_sys::MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384,
	TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256,
	TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384,
	TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256,
	TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384,
	TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256,
	TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384,
	TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256,
	TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384,
	TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256 = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256,
	TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384 = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384,
	TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256 = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256,
	TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384 = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384,
	TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256 = mbedtls_sys::MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256,
	TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384 = mbedtls_sys::MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384,
	TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256,
	TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384 = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384,
	TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256,
	TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384,
	TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256,
	TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = mbedtls_sys::MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384,
	TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = mbedtls_sys::MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256,
	TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = mbedtls_sys::MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384,
	TLS_RSA_WITH_AES_128_CCM = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_AES_128_CCM,
	TLS_RSA_WITH_AES_256_CCM = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_AES_256_CCM,
	TLS_DHE_RSA_WITH_AES_128_CCM = mbedtls_sys::MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM,
	TLS_DHE_RSA_WITH_AES_256_CCM = mbedtls_sys::MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM,
	TLS_RSA_WITH_AES_128_CCM_8 = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_AES_128_CCM_8,
	TLS_RSA_WITH_AES_256_CCM_8 = mbedtls_sys::MBEDTLS_TLS_RSA_WITH_AES_256_CCM_8,
	TLS_DHE_RSA_WITH_AES_128_CCM_8 = mbedtls_sys::MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM_8,
	TLS_DHE_RSA_WITH_AES_256_CCM_8 = mbedtls_sys::MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM_8,
	TLS_PSK_WITH_AES_128_CCM = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_AES_128_CCM,
	TLS_PSK_WITH_AES_256_CCM = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_AES_256_CCM,
	TLS_DHE_PSK_WITH_AES_128_CCM = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM,
	TLS_DHE_PSK_WITH_AES_256_CCM = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM,
	TLS_PSK_WITH_AES_128_CCM_8 = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8,
	TLS_PSK_WITH_AES_256_CCM_8 = mbedtls_sys::MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8,
	TLS_DHE_PSK_WITH_AES_128_CCM_8 = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM_8,
	TLS_DHE_PSK_WITH_AES_256_CCM_8 = mbedtls_sys::MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM_8,
	TLS_ECDHE_ECDSA_WITH_AES_128_CCM = mbedtls_sys::MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM,
	TLS_ECDHE_ECDSA_WITH_AES_256_CCM = mbedtls_sys::MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM,
	TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 = mbedtls_sys::MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8,
	TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8 = mbedtls_sys::MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8,
	TLS_ECJPAKE_WITH_AES_128_CCM_8 = mbedtls_sys::MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8,
}

// mbedtls, arguably incorrectly, re-uses NULL (which is actually only meant for pointers) as the list terminator
// Fortunately, on all current platforms (as of August 2016) that rust supports, it is believed that NULL is equivalent to 0
const NULL: c_int = 0;
const increment: usize = 1;

impl CipherSuite
{
	pub fn allSupportedCipherSuites() -> &'static [CipherSuite]
	{
		unsafe
		{
			let list: *const c_int = mbedtls_sys::mbedtls_ssl_list_ciphersuites();
			
			let mut element = list;
			let mut listSize = 0;
			while *element != NULL
			{
				listSize = listSize + increment;
				element = element.offset(increment as isize);
			}
			
			from_raw_parts(transmute::<_, *const CipherSuite>(list), listSize)
		}
	}
	
	pub fn name(&self) -> &'static CStr
	{
		let cipherSuiteId: c_int = *self as c_int;
		unsafe
		{
			let name = mbedtls_sys::mbedtls_ssl_get_ciphersuite_name(cipherSuiteId);
			debug_assert!(!name.is_null(), "mbedtls_ssl_get_ciphersuite_name() returned NULL - probably an API vs linked library incompatibility");
			CStr::from_ptr(name)
		}
	}
}

#[cfg(test)]
mod tests
{
	use super::*;
	use ::std::ffi::CStr;
	use ::std::ffi::CString;
	
	#[test]
	fn ciphersuites()
	{
		let suites = CipherSuite::allSupportedCipherSuites();
		assert!(suites.len() > 0, "No CipherSuites");
	}
	
	#[test]
	fn name()
	{
		let name = CipherSuite::TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384.name();
		let expected: &CStr = &CString::new("TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384").unwrap();
		assert!(name == expected, "Was '{}'", name.to_string_lossy());
	}
}
